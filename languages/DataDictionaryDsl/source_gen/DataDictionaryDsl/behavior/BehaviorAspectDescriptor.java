package DataDictionaryDsl.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myIAbstractStructure__BehaviorDescriptor = new IAbstractStructure__BehaviorDescriptor();
  private final BHDescriptor myIAbstractElement__BehaviorDescriptor = new IAbstractElement__BehaviorDescriptor();
  private final BHDescriptor myExclusive__BehaviorDescriptor = new Exclusive__BehaviorDescriptor();
  private final BHDescriptor myDomain__BehaviorDescriptor = new Domain__BehaviorDescriptor();
  private final BHDescriptor myPredefined__BehaviorDescriptor = new Predefined__BehaviorDescriptor();
  private final BHDescriptor myChar__BehaviorDescriptor = new Char__BehaviorDescriptor();
  private final BHDescriptor myDateTime__BehaviorDescriptor = new DateTime__BehaviorDescriptor();
  private final BHDescriptor myInteger__BehaviorDescriptor = new Integer__BehaviorDescriptor();
  private final BHDescriptor myBoolean__BehaviorDescriptor = new Boolean__BehaviorDescriptor();
  private final BHDescriptor myText__BehaviorDescriptor = new Text__BehaviorDescriptor();
  private final BHDescriptor myStructureDefinition__BehaviorDescriptor = new StructureDefinition__BehaviorDescriptor();
  private final BHDescriptor myDataDictionary__BehaviorDescriptor = new DataDictionary__BehaviorDescriptor();
  private final BHDescriptor myField__BehaviorDescriptor = new Field__BehaviorDescriptor();
  private final BHDescriptor myAggregation__BehaviorDescriptor = new Aggregation__BehaviorDescriptor();
  private final BHDescriptor mySet__BehaviorDescriptor = new Set__BehaviorDescriptor();
  private final BHDescriptor myNonExclusive__BehaviorDescriptor = new NonExclusive__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myAggregation__BehaviorDescriptor;
      case 1:
        return myBoolean__BehaviorDescriptor;
      case 2:
        return myChar__BehaviorDescriptor;
      case 3:
        return myDataDictionary__BehaviorDescriptor;
      case 4:
        return myDateTime__BehaviorDescriptor;
      case 5:
        return myDomain__BehaviorDescriptor;
      case 6:
        return myExclusive__BehaviorDescriptor;
      case 7:
        return myField__BehaviorDescriptor;
      case 8:
        return myIAbstractElement__BehaviorDescriptor;
      case 9:
        return myIAbstractStructure__BehaviorDescriptor;
      case 10:
        return myInteger__BehaviorDescriptor;
      case 11:
        return myNonExclusive__BehaviorDescriptor;
      case 12:
        return myPredefined__BehaviorDescriptor;
      case 13:
        return mySet__BehaviorDescriptor;
      case 14:
        return myStructureDefinition__BehaviorDescriptor;
      case 15:
        return myText__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x73ede05be9c14454L), MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x1c08e9be3de0a121L), MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x1c08e9be3db505a7L), MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x73ede05be9bfff49L), MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x1c08e9be3dd493f3L), MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0xd45dfaeceabe780L), MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x7171b68977873f0L), MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x73ede05be9c14433L), MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x7171b68977873e6L), MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x7171b68977873e5L), MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x1c08e9be3dd68bbcL), MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x73ede05be9c1bfe4L), MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0xd45dfaeceabe939L), MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x73ede05be9c14455L), MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x73ede05be9bfff46L), MetaIdFactory.conceptId(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x1c08e9be3de4c133L)).seal();
}
