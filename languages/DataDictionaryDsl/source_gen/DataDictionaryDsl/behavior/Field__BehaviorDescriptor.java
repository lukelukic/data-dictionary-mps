package DataDictionaryDsl.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Field__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x73ede05be9c14433L, "DataDictionaryDsl.structure.Field");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Integer> getFieldCount_id21H$u621wMk = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("getFieldCount").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("21H$u621wMk").registry(REGISTRY).build();
  public static final SMethod<String> GetType_id1MU0qNcWzx8 = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("GetType").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1MU0qNcWzx8").registry(REGISTRY).build();
  public static final SMethod<ArrayList<String>> getAllFieldsName_id1K8UrSXeeTF = new SMethodBuilder<ArrayList<String>>(new SJavaCompoundTypeImpl(ArrayList.class)).name("getAllFieldsName").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1K8UrSXeeTF").registry(REGISTRY).build();
  public static final SMethod<Boolean> hasLinkedDomain_id1qCH0nU6qJW = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("hasLinkedDomain").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1qCH0nU6qJW").registry(REGISTRY).build();
  public static final SMethod<SNode> getStructureDefinition_id1qCH0nU6qR5 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getStructureDefinition").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1qCH0nU6qR5").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getFieldCount_id21H$u621wMk, GetType_id1MU0qNcWzx8, getAllFieldsName_id1K8UrSXeeTF, hasLinkedDomain_id1qCH0nU6qJW, getStructureDefinition_id1qCH0nU6qR5);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static int getFieldCount_id21H$u621wMk(@NotNull SNode __thisNode__) {
    return 1;
  }
  /*package*/ static String GetType_id1MU0qNcWzx8(@NotNull SNode __thisNode__) {
    return "Field";
  }
  /*package*/ static ArrayList<String> getAllFieldsName_id1K8UrSXeeTF(@NotNull SNode __thisNode__) {
    ArrayList<String> names = new ArrayList<String>();
    names.add(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
    return names;
  }
  /*package*/ static boolean hasLinkedDomain_id1qCH0nU6qJW(@NotNull SNode __thisNode__) {
    for (SNode fieldDefinition : ListSequence.fromList(SLinkOperations.getChildren(Field__BehaviorDescriptor.getStructureDefinition_id1qCH0nU6qR5.invoke(__thisNode__), MetaAdapterFactory.getContainmentLink(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x73ede05be9bfff46L, 0x1c08e9be3d6f6444L, "fieldDefinitions")))) {
      if (SLinkOperations.getTarget(fieldDefinition, MetaAdapterFactory.getReferenceLink(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x1c08e9be3d6d982aL, 0x1c08e9be3d6d982dL, "field")) == __thisNode__) {
        return true;
      }
    }
    return false;
  }
  /*package*/ static SNode getStructureDefinition_id1qCH0nU6qR5(@NotNull SNode __thisNode__) {
    SNode structureDefinition = SNodeOperations.getParent(__thisNode__);
    while (!(SNodeOperations.isInstanceOf(structureDefinition, MetaAdapterFactory.getConcept(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x73ede05be9bfff46L, "DataDictionaryDsl.structure.StructureDefinition")))) {
      structureDefinition = SNodeOperations.getParent(structureDefinition);
    }
    return ((SNode) structureDefinition);
  }

  /*package*/ Field__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Integer) getFieldCount_id21H$u621wMk(node));
      case 1:
        return (T) ((String) GetType_id1MU0qNcWzx8(node));
      case 2:
        return (T) ((ArrayList<String>) getAllFieldsName_id1K8UrSXeeTF(node));
      case 3:
        return (T) ((Boolean) hasLinkedDomain_id1qCH0nU6qJW(node));
      case 4:
        return (T) ((SNode) getStructureDefinition_id1qCH0nU6qR5(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
